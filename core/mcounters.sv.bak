import global_pkg::*;
`include "debug_def.sv"

//This unit contains machine counters and machine event selector
module mcounters
(
    //Syscon
    input logic clk,

    //Control signals
    input logic [11:0] addr,
    input logic wr,
    input  logic [31:0] din,
    output logic [31:0] dout,
    output logic illegal_address,


    //Event signal interface for the performance counters
    EVENT_INT.in event_bus,
    input wire [31:0] address_ld
);


/////////////////////////////////////////////////////////////////////
//                     Machine Counter Setup                       //
/////////////////////////////////////////////////////////////////////


parameter LOAD_INSTRUCTIONS = 1;
parameter STORE_INSTRUCTIONS = 2;
parameter UNALIGNED_ACCESSES = 3;
parameter ARITHMETIC_INSTRUCTIONS = 4;
parameter NUMBER_OF_TRAPS = 5;
parameter INTERRUPT_COUNT = 6;
parameter UNCONDITIONAL_BRANCH = 7;
parameter CODITIONAL_BRANCH = 8;
parameter TAKEN_BRANCHS = 9;

//0x323 MRW mhpmevent3 Machine performance-monitoring event selector.
//0x324 MRW mhpmevent4 Machine performance-monitoring event selector.
//0x33F MRW mhpmevent31 Machine performance-monitoring event selector.
logic [31:0] mhpmevent [12'h33F:12'h323];
 
//0xB03 MRW mhpmcounter3 Machine performance-monitoring counter.
//0xB04 MRW mhpmcounter4 Machine performance-monitoring counter.
//0xB1F MRW mhpmcounter31 Machine performance-monitoring counter.
logic [63:0] mhpmcounter [12'hB1F:12'hB03];



`ifdef sim
    initial begin
        for(int i = 12'hB03; i <= 12'hB1F;i++)
        begin
            mhpmcounter [i] = 0;
        end
        for(int i = 12'h33F; i <= 12'h323;i++)
        begin
            mhpmevent [i] = 0;
        end
    end
`endif

genvar i;
generate
    //Maybe
    for(i = 12'hB03; i <= 12'hB1F;i++)
    begin : performance_counter_logic
        always@(posedge clk)
        begin
            if(wr & ((addr >= 12'hB03) & (addr <= 12'hB1F)))
            begin
                mhpmcounter [addr] = din;
            end
            else
            begin
                
                case(mhpmevent [(i-12'hB03)+12'h323])
                    LOAD_INSTRUCTIONS:
                    begin
                        if(event_bus.load)
                        begin
                            mhpmcounter [i] = mhpmcounter [i] + 1;
                        end
                    end
                    STORE_INSTRUCTIONS:
                    begin
                        if(event_bus.store)
                        begin
                            mhpmcounter [i] = mhpmcounter [i] + 1;
                        end
                    end
                    UNALIGNED_ACCESSES:
                    begin
                        if(event_bus.unaligned)
                        begin
                            mhpmcounter [i] = mhpmcounter [i] + 1;
                        end
                    end
                    ARITHMETIC_INSTRUCTIONS:
                    begin
                        if(event_bus.arithmetic)
                        begin
                            mhpmcounter [i] = mhpmcounter [i] + 1;
                        end
                    end
                    NUMBER_OF_TRAPS:
                    begin
                        if(event_bus.trap)
                        begin
                        mhpmcounter [i] = mhpmcounter [i] + 1;
                        end
                    end
                    INTERRUPT_COUNT:
                    begin
                        if(event_bus.interrupt)
                        begin
                        mhpmcounter [i] = mhpmcounter [i] + 1;
                        end
                    end
                    UNCONDITIONAL_BRANCH:
                    begin
                        if(event_bus.unconditional_branch)
                        begin
                        mhpmcounter [i] = mhpmcounter [i] + 1;
                        end
                    end
                    CODITIONAL_BRANCH:
                    begin
                        if(event_bus.conditional_branch)
                        begin
                        mhpmcounter [i] = mhpmcounter [i] + 1;
                        end
                    end
                    TAKEN_BRANCHS:
                    begin
                        if(event_bus.unconditional_branch)
                        begin
                        mhpmcounter [i] = mhpmcounter [i] + 1;
                        end
                    end
                    default:
                    begin
                        mhpmcounter [i] = mhpmcounter [i];
                    end
                endcase
            end
        end
    end
endgenerate





always_comb
begin
    if((addr >= 12'hB03) && (addr <= 12'hB1F))
    begin 
        illegal_address = 1'b0; 
        dout = mhpmcounter [addr] [31:0];
    end
    else if((addr >= 12'h323) && (addr <= 12'h33F))
    begin 
        illegal_address = 1'b0; 
        dout = mhpmevent [addr] [31:0];
    end
    if((addr >= 12'hB83) && (addr <= 12'hB84))
    begin 
        illegal_address = 1'b0; 
        dout = mhpmcounter [addr] [63:32];
    end		  
    else
    begin
        illegal_address = 1'b1; 
    end

end


endmodule